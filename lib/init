cfg="$(dirname "$0")"/../etc/config; eval 'loadcfg(){ '"$(<$cfg)"' ;}'

init() {
  IFS=""
  shopt -s nocasematch
  export HOMEBREW_VERBOSE=1
  macosxver=$(uname -r); macosxver=${macosxver%%.*}
  case $macosxver in
    10) macosxver=10.6;;
    11) macosxver=10.7;;
    12) macosxver=10.8;;
    *) macosxver="";;
  esac
  msgprefix=':::'
  loadcfg
  formulae+=(git)
  installdir=/opt/$name
  bindir=$installdir/bin
  brew=$bindir/brew
  manifestfile=$installdir/MANIFEST
}

brew() {
  PATH=$bindir:$PATH "$brew" "$@"
}

check_macosx() {
  if [[ "$(uname -s)" != "Darwin" || -z "$macosxver" ]]; then
    tell "Requires Mac OS X 10.6 Snow Leopard, 10.7 Lion, or 10.8 Mountain Lion."
    exit 1
  fi
}

check_noinstalldir() {
  if [[ -e "$installdir" ]]; then
    tell "Found $installdir; perhaps a builder installation already exists?"
    tell "To start from scratch, please move or remove $installdir"
    exit 1
  fi
}

check_xquartz() {
  if [[ ! -x /opt/X11/lib/libX11.dylib ]]; then
    tell "XQuartz is required; please install from http://xquartz.macosforge.org and"
    tell "then rerun this script."
    exit 1
  fi
}

check_init() {
  if [[ ! -x "$brew" ]]; then
    tell "It doesn't look like the build directory has been initialized."
    tell "Please try to run case-init."
    exit 1
  fi
}

create_installdir() {
  sudo mkdir -p -m 775 "$installdir" || {
    tell "Could not create $installdir; aborting."; exit 1; }
  sudo chown $USER:admin "$installdir" || {
    tell "Cound not change ownership of $installdir; aborting."; exit 1; }
}

mkscript() {
  tpl="$(dirname "$0")"/../share/$1
  fns=$(sed 's/^%init \(.*\)$/\1/p;d' "$tpl")
  sed '/^%init/,$d' "$tpl"
  (IFS=' '; declare -f loadcfg init $fns) || { tell "mkscript: error: could not get requested functions"; exit 1; }
  echo init
  sed '1,/^%init/d' "$tpl"
}

tell() {
  echo "$msgprefix $@" >/dev/stderr
}

spinstart() {
  _sp="/-\|"
  _sc=0
  echo -n "$msgprefix $@  " >/dev/stderr
  spin
}

spin() {
  printf "\b${_sp:_sc++:1}" >/dev/stderr
  ((_sc!=${#_sp})) || _sc=0
}

spinend() {
  printf "\b$@\n" >/dev/stderr
}

ask() {
  echo -n "$msgprefix $@ [Y/n] " >/dev/stderr
  read
  case "$REPLY" in
    y|yes|"") return 0;;
    *) tell "Interpreting response as no."; return 1;;
  esac
}

init
